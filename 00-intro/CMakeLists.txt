cmake_minimum_required(VERSION 3.5)
project(helloProject)
set (HELLO_VERSION_MAJOR 6)
set (HELLO_VERSION_MINOR 2)
set (HELLO_VERSION_PATCH 3)
set (HELLO_VERSION_LABEL "rc1")

set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

IF(UNIX)
  SET(CMAKE_SKIP_BUILD_RPATH  FALSE)
  SET(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE)
  set(CMAKE_INSTALL_RPATH_USE_LINK_PATH FALSE)
  set(CMAKE_INSTALL_RPATH "$ORIGIN/../lib")
ENDIF()

option(CONFIG_FOO1 "foo1 feature" ON)
configure_file(program.h.in ${CMAKE_CURRENT_BINARY_DIR}/program.h)

include_directories(${CMAKE_CURRENT_SOURCE_DIR})
include_directories(${CMAKE_CURRENT_BINARY_DIR})
add_executable(hello hello.c)
install(TARGETS hello DESTINATION bin)

if (CONFIG_FOO1)
    add_subdirectory(foo1)
    set (EXTRA_LIBS ${EXTRA_LIBS} foo1)
endif()
add_subdirectory(foo2)
target_link_libraries(hello foo2 ${EXTRA_LIBS})

include(InstallRequiredSystemLibraries)

set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "My funky project")
set(CPACK_PACKAGE_VENDOR "Me, myself, and I")
set(CPACK_PACKAGE_VERSION_MAJOR ${HELLO_VERSION_MAJOR})
set(CPACK_PACKAGE_VERSION_MINOR ${HELLO_VERSION_MINOR})
set(CPACK_PACKAGE_VERSION_PATCH ${HELLO_VERSION_PATCH})
set(CPACK_PACKAGE_VERSION ${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.${CPACK_PACKAGE_VERSION_PATCH}-${CPACK_PACKAGE_VERSION_LABEL})
set(CPACK_PACKAGE_INSTALL_DIRECTORY "CMake ${CMake_VERSION_MAJOR}.${CMake_VERSION_MINOR}")
set(CPACK_PACKAGE_EXECUTABLES hello "hello")
set(CPACK_STRIP_FILES true)
include(CPack)
